// This file is generated by ReaktNativeToolkit. Do not edit.
import {com} from './models';
import {useCallback, useMemo} from 'react';
import {ViewProps, requireNativeComponent} from 'react-native';


interface NativeMyComposeViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  intProp: number;

  doubleProp: number;

  floatProp: number;

  objectProp: string;

  enumProp: string;

  listProp: string;

  onTextFieldValueChange: (event: any) => void;

  onButtonPress: (event: any) => void;

  onTestParams: (event: any) => void;

}

interface MyComposeViewProps extends ViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  intProp: number;

  doubleProp: number;

  floatProp: number;

  objectProp: com.myrnproject.shared.MyDataClass;

  enumProp: com.myrnproject.shared.Enum;

  listProp: Array<com.myrnproject.shared.MyDataClass>;

  onTextFieldValueChange: (arg0: string) => void;

  onButtonPress: () => void;

  onTestParams: (arg0: string, arg1: string | null, arg2: boolean, arg3: number, arg4: number, arg5: number, arg6: com.myrnproject.shared.MyDataClass, arg7: com.myrnproject.shared.Enum, arg8: Array<com.myrnproject.shared.MyDataClass>) => void;

}

const NativeMyComposeView = requireNativeComponent<NativeMyComposeViewProps>("MyComposeView");

export const MyComposeView = (props: MyComposeViewProps) => {
  const message = useMemo(() => (() => {
    const temp = props.message;
    return temp;
  })(), [props.message]);
  const textFieldValue = useMemo(() => (() => {
    const temp = props.textFieldValue;
    return temp;
  })(), [props.textFieldValue]);
  const nullableStringProp = useMemo(() => (() => {
    const temp = props.nullableStringProp;
    return temp === null ? null : (temp);
  })(), [props.nullableStringProp]);
  const boolProp = useMemo(() => (() => {
    const temp = props.boolProp;
    return temp;
  })(), [props.boolProp]);
  const intProp = useMemo(() => (() => {
    const temp = props.intProp;
    return temp;
  })(), [props.intProp]);
  const doubleProp = useMemo(() => (() => {
    const temp = props.doubleProp;
    return temp;
  })(), [props.doubleProp]);
  const floatProp = useMemo(() => (() => {
    const temp = props.floatProp;
    return temp;
  })(), [props.floatProp]);
  const objectProp = useMemo(() => JSON.stringify((() => {
    const temp = props.objectProp;
    return com.myrnproject.shared.toJsonMyDataClass(temp);
  })()), [props.objectProp]);
  const enumProp = useMemo(() => JSON.stringify((() => {
    const temp = props.enumProp;
    return com.myrnproject.shared.toJsonEnum(temp);
  })()), [props.enumProp]);
  const listProp = useMemo(() => JSON.stringify((() => {
    const temp = props.listProp;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonMyDataClass(temp_);
    })());
  })()), [props.listProp]);
  const nativeOnTextFieldValueChange = useCallback((event: any) => {
    props.onTextFieldValueChange(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string)}, [props.onTextFieldValueChange]);
  const nativeOnButtonPress = useCallback((event: any) => {
    props.onButtonPress()}, [props.onButtonPress]);
  const nativeOnTestParams = useCallback((event: any) => {
    props.onTestParams(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string, ((() => {
      const temp = event.nativeEvent.args[1];
      return temp === null ? null : (temp);
    })()) as string | null, ((() => {
      const temp = event.nativeEvent.args[2];
      return temp;
    })()) as boolean, ((() => {
      const temp = event.nativeEvent.args[3];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[4];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[5];
      return temp;
    })()) as number, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[6]);
      return com.myrnproject.shared.fromJsonMyDataClass(temp);
    })()) as com.myrnproject.shared.MyDataClass, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[7]);
      return com.myrnproject.shared.fromJsonEnum(temp);
    })()) as com.myrnproject.shared.Enum, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[8]);
      return temp.map((it: any) => ((() => {
        const temp_ = it;
        return com.myrnproject.shared.fromJsonMyDataClass(temp_);
      })()) as com.myrnproject.shared.MyDataClass);
    })()) as Array<com.myrnproject.shared.MyDataClass>)}, [props.onTestParams]);
  return <NativeMyComposeView  {...props} message={message}
  textFieldValue={textFieldValue}
  nullableStringProp={nullableStringProp}
  boolProp={boolProp}
  intProp={intProp}
  doubleProp={doubleProp}
  floatProp={floatProp}
  objectProp={objectProp}
  enumProp={enumProp}
  listProp={listProp}
  onTextFieldValueChange={nativeOnTextFieldValueChange}
  onButtonPress={nativeOnButtonPress}
  onTestParams={nativeOnTestParams} />;
};
