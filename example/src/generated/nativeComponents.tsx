// This file is generated by ReaktNativeToolkit. Do not edit.
import {com} from './models';
import {useCallback, useMemo} from 'react';
import {ViewProps, requireNativeComponent} from 'react-native';


interface NativeMyComposeViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  intProp: number;

  doubleProp: number;

  floatProp: number;

  objectProp: string;

  enumProp: string;

  listProp: string;

  onTextFieldValueChange: (event: any) => void;

  onButtonPress: (event: any) => void;

  onTestParams: (event: any) => void;

}

interface MyComposeViewProps extends ViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  intProp: number;

  doubleProp: number;

  floatProp: number;

  objectProp: com.myrnproject.shared.MyDataClass;

  enumProp: com.myrnproject.shared.Enum;

  listProp: Array<com.myrnproject.shared.MyDataClass>;

  onTextFieldValueChange: (arg0: string) => void;

  onButtonPress: () => void;

  onTestParams: (arg0: string, arg1: string | null, arg2: boolean, arg3: number, arg4: number, arg5: number, arg6: com.myrnproject.shared.MyDataClass, arg7: com.myrnproject.shared.Enum, arg8: Array<com.myrnproject.shared.MyDataClass>) => void;

}

interface NativeMySecondComposeViewProps {

  index: number;

  onPress: (event: any) => void;

}

interface MySecondComposeViewProps extends ViewProps {

  index: number;

  onPress: () => void;

}

const NativeMyComposeView = requireNativeComponent<NativeMyComposeViewProps>("MyComposeView");

export const MyComposeView = (props: MyComposeViewProps) => {
  const {
  message,
  textFieldValue,
  nullableStringProp,
  boolProp,
  intProp,
  doubleProp,
  floatProp,
  objectProp,
  enumProp,
  listProp,
  onTextFieldValueChange,
  onButtonPress,
  onTestParams,
  ...rest
  } = props;
  const messageMemoized = useMemo(() => (() => {
    const temp = message;
    return temp;
  })(), [message]);
  const textFieldValueMemoized = useMemo(() => (() => {
    const temp = textFieldValue;
    return temp;
  })(), [textFieldValue]);
  const nullableStringPropMemoized = useMemo(() => (() => {
    const temp = nullableStringProp;
    return temp === null ? null : (temp);
  })(), [nullableStringProp]);
  const boolPropMemoized = useMemo(() => (() => {
    const temp = boolProp;
    return temp;
  })(), [boolProp]);
  const intPropMemoized = useMemo(() => (() => {
    const temp = intProp;
    return temp;
  })(), [intProp]);
  const doublePropMemoized = useMemo(() => (() => {
    const temp = doubleProp;
    return temp;
  })(), [doubleProp]);
  const floatPropMemoized = useMemo(() => (() => {
    const temp = floatProp;
    return temp;
  })(), [floatProp]);
  const objectPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = objectProp;
    return com.myrnproject.shared.toJsonMyDataClass(temp);
  })()), [objectProp]);
  const enumPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = enumProp;
    return com.myrnproject.shared.toJsonEnum(temp);
  })()), [enumProp]);
  const listPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = listProp;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonMyDataClass(temp_);
    })());
  })()), [listProp]);
  const nativeOnTextFieldValueChange = useCallback((event: any) => {
    onTextFieldValueChange(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string)}, [onTextFieldValueChange]);
  const nativeOnButtonPress = useCallback(() => {
    onButtonPress()}, [onButtonPress]);
  const nativeOnTestParams = useCallback((event: any) => {
    onTestParams(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string, ((() => {
      const temp = event.nativeEvent.args[1];
      return temp === null ? null : (temp);
    })()) as string | null, ((() => {
      const temp = event.nativeEvent.args[2];
      return temp;
    })()) as boolean, ((() => {
      const temp = event.nativeEvent.args[3];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[4];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[5];
      return temp;
    })()) as number, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[6]);
      return com.myrnproject.shared.fromJsonMyDataClass(temp);
    })()) as com.myrnproject.shared.MyDataClass, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[7]);
      return com.myrnproject.shared.fromJsonEnum(temp);
    })()) as com.myrnproject.shared.Enum, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[8]);
      return temp.map((it: any) => ((() => {
        const temp_ = it;
        return com.myrnproject.shared.fromJsonMyDataClass(temp_);
      })()) as com.myrnproject.shared.MyDataClass);
    })()) as Array<com.myrnproject.shared.MyDataClass>)}, [onTestParams]);
  return <NativeMyComposeView {...rest} message={messageMemoized}
  textFieldValue={textFieldValueMemoized}
  nullableStringProp={nullableStringPropMemoized}
  boolProp={boolPropMemoized}
  intProp={intPropMemoized}
  doubleProp={doublePropMemoized}
  floatProp={floatPropMemoized}
  objectProp={objectPropMemoized}
  enumProp={enumPropMemoized}
  listProp={listPropMemoized}
  onTextFieldValueChange={nativeOnTextFieldValueChange}
  onButtonPress={nativeOnButtonPress}
  onTestParams={nativeOnTestParams} />;
};

const NativeMySecondComposeView = requireNativeComponent<NativeMySecondComposeViewProps>("MySecondComposeView");

export const MySecondComposeView = (props: MySecondComposeViewProps) => {
  const {
  index,
  onPress,
  ...rest
  } = props;
  const indexMemoized = useMemo(() => (() => {
    const temp = index;
    return temp;
  })(), [index]);
  const nativeOnPress = useCallback(() => {
    onPress()}, [onPress]);
  return <NativeMySecondComposeView {...rest} index={indexMemoized}
  onPress={nativeOnPress} />;
};
