// This file is generated by ReaktNativeToolkit. Do not edit.
import {com} from './models';
import {useCallback, useMemo} from 'react';
import {ViewProps, requireNativeComponent} from 'react-native';


interface NativeMyComposeViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  nullableBoolProp: boolean | null;

  intProp: number;

  nullableIntProp: number | null;

  doubleProp: number;

  floatProp: number;

  objectProp: string;

  nullableObjectProp: string;

  enumProp: string;

  nullableEnumProp: string;

  listProp: string;

  nullableListProp: string;

  sealedInterface: string;

  nullableSealedInterface: string;

  onTextFieldValueChange: (event: any) => void;

  onButtonPress: (event: any) => void;

  onTestParams: (event: any) => void;

}

interface MyComposeViewProps extends ViewProps {

  message: string;

  textFieldValue: string;

  nullableStringProp: string | null;

  boolProp: boolean;

  nullableBoolProp: boolean | null;

  intProp: number;

  nullableIntProp: number | null;

  doubleProp: number;

  floatProp: number;

  objectProp: com.myrnproject.shared.MyDataClass;

  nullableObjectProp: com.myrnproject.shared.MyDataClass | null;

  enumProp: com.myrnproject.shared.Enum;

  nullableEnumProp: com.myrnproject.shared.Enum | null;

  listProp: Array<com.myrnproject.shared.MyDataClass>;

  nullableListProp: Array<com.myrnproject.shared.MyDataClass> | null;

  sealedInterface: com.myrnproject.shared.TestSealedInterfaceType;

  nullableSealedInterface: com.myrnproject.shared.TestSealedInterfaceType | null;

  onTextFieldValueChange: (arg0: string) => void;

  onButtonPress: () => void;

  onTestParams: (arg0: string, arg1: string | null, arg2: boolean, arg3: boolean | null, arg4: number, arg5: number | null, arg6: number, arg7: number | null, arg8: number, arg9: number | null, arg10: com.myrnproject.shared.MyDataClass, arg11: com.myrnproject.shared.MyDataClass | null, arg12: com.myrnproject.shared.Enum, arg13: com.myrnproject.shared.Enum | null, arg14: Array<com.myrnproject.shared.MyDataClass>, arg15: Array<com.myrnproject.shared.MyDataClass> | null, arg16: com.myrnproject.shared.TestSealedInterfaceType, arg17: com.myrnproject.shared.TestSealedInterfaceType | null) => void;

}

interface NativeMySecondComposeViewProps {

  index: number;

  onPress: (event: any) => void;

}

interface MySecondComposeViewProps extends ViewProps {

  index: number;

  onPress: () => void;

}

interface NativeMyTransparentComposeViewProps {
}

interface MyTransparentComposeViewProps extends ViewProps {
}

interface NativeMyMinimalComposeViewProps {
}

interface MyMinimalComposeViewProps extends ViewProps {
}

const NativeMyComposeView = requireNativeComponent<NativeMyComposeViewProps>("MyComposeView");

export const MyComposeView = (props: MyComposeViewProps) => {
  const {
  message,
  textFieldValue,
  nullableStringProp,
  boolProp,
  nullableBoolProp,
  intProp,
  nullableIntProp,
  doubleProp,
  floatProp,
  objectProp,
  nullableObjectProp,
  enumProp,
  nullableEnumProp,
  listProp,
  nullableListProp,
  sealedInterface,
  nullableSealedInterface,
  onTextFieldValueChange,
  onButtonPress,
  onTestParams,
  ...rest
  } = props;
  const messageMemoized = useMemo(() => (() => {
    const temp = message;
    return temp;
  })(), [message]);
  const textFieldValueMemoized = useMemo(() => (() => {
    const temp = textFieldValue;
    return temp;
  })(), [textFieldValue]);
  const nullableStringPropMemoized = useMemo(() => (() => {
    const temp = nullableStringProp;
    return temp === null ? null : (temp);
  })(), [nullableStringProp]);
  const boolPropMemoized = useMemo(() => (() => {
    const temp = boolProp;
    return temp;
  })(), [boolProp]);
  const nullableBoolPropMemoized = useMemo(() => (() => {
    const temp = nullableBoolProp;
    return temp === null ? null : (temp);
  })(), [nullableBoolProp]);
  const intPropMemoized = useMemo(() => (() => {
    const temp = intProp;
    return temp;
  })(), [intProp]);
  const nullableIntPropMemoized = useMemo(() => (() => {
    const temp = nullableIntProp;
    return temp === null ? null : (temp);
  })(), [nullableIntProp]);
  const doublePropMemoized = useMemo(() => (() => {
    const temp = doubleProp;
    return temp;
  })(), [doubleProp]);
  const floatPropMemoized = useMemo(() => (() => {
    const temp = floatProp;
    return temp;
  })(), [floatProp]);
  const objectPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = objectProp;
    return com.myrnproject.shared.toJsonMyDataClass(temp);
  })()), [objectProp]);
  const nullableObjectPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = nullableObjectProp;
    return temp === null ? null : (com.myrnproject.shared.toJsonMyDataClass(temp));
  })()), [nullableObjectProp]);
  const enumPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = enumProp;
    return com.myrnproject.shared.toJsonEnum(temp);
  })()), [enumProp]);
  const nullableEnumPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = nullableEnumProp;
    return temp === null ? null : (com.myrnproject.shared.toJsonEnum(temp));
  })()), [nullableEnumProp]);
  const listPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = listProp;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonMyDataClass(temp_);
    })());
  })()), [listProp]);
  const nullableListPropMemoized = useMemo(() => JSON.stringify((() => {
    const temp = nullableListProp;
    return temp === null ? null : (temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonMyDataClass(temp_);
    })()));
  })()), [nullableListProp]);
  const sealedInterfaceMemoized = useMemo(() => JSON.stringify((() => {
    const temp = sealedInterface;
    return com.myrnproject.shared.toJsonTestSealedInterfaceType(temp);
  })()), [sealedInterface]);
  const nullableSealedInterfaceMemoized = useMemo(() => JSON.stringify((() => {
    const temp = nullableSealedInterface;
    return temp === null ? null : (com.myrnproject.shared.toJsonTestSealedInterfaceType(temp));
  })()), [nullableSealedInterface]);
  const nativeOnTextFieldValueChange = useCallback((event: any) => {
    onTextFieldValueChange(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string)}, [onTextFieldValueChange]);
  const nativeOnButtonPress = useCallback(() => {
    onButtonPress()}, [onButtonPress]);
  const nativeOnTestParams = useCallback((event: any) => {
    onTestParams(((() => {
      const temp = event.nativeEvent.args[0];
      return temp;
    })()) as string, ((() => {
      const temp = event.nativeEvent.args[1];
      return temp === null ? null : (temp);
    })()) as string | null, ((() => {
      const temp = event.nativeEvent.args[2];
      return temp;
    })()) as boolean, ((() => {
      const temp = event.nativeEvent.args[3];
      return temp === null ? null : (temp);
    })()) as boolean | null, ((() => {
      const temp = event.nativeEvent.args[4];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[5];
      return temp === null ? null : (temp);
    })()) as number | null, ((() => {
      const temp = event.nativeEvent.args[6];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[7];
      return temp === null ? null : (temp);
    })()) as number | null, ((() => {
      const temp = event.nativeEvent.args[8];
      return temp;
    })()) as number, ((() => {
      const temp = event.nativeEvent.args[9];
      return temp === null ? null : (temp);
    })()) as number | null, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[10]);
      return com.myrnproject.shared.fromJsonMyDataClass(temp);
    })()) as com.myrnproject.shared.MyDataClass, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[11]);
      return temp === null ? null : (com.myrnproject.shared.fromJsonMyDataClass(temp));
    })()) as com.myrnproject.shared.MyDataClass | null, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[12]);
      return com.myrnproject.shared.fromJsonEnum(temp);
    })()) as com.myrnproject.shared.Enum, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[13]);
      return temp === null ? null : (com.myrnproject.shared.fromJsonEnum(temp));
    })()) as com.myrnproject.shared.Enum | null, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[14]);
      return temp.map((it: any) => ((() => {
        const temp_ = it;
        return com.myrnproject.shared.fromJsonMyDataClass(temp_);
      })()) as com.myrnproject.shared.MyDataClass);
    })()) as Array<com.myrnproject.shared.MyDataClass>, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[15]);
      return temp === null ? null : (temp.map((it: any) => ((() => {
        const temp_ = it;
        return com.myrnproject.shared.fromJsonMyDataClass(temp_);
      })()) as com.myrnproject.shared.MyDataClass));
    })()) as Array<com.myrnproject.shared.MyDataClass> | null, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[16]);
      return com.myrnproject.shared.fromJsonTestSealedInterfaceType(temp);
    })()) as com.myrnproject.shared.TestSealedInterfaceType, ((() => {
      const temp = JSON.parse(event.nativeEvent.args[17]);
      return temp === null ? null : (com.myrnproject.shared.fromJsonTestSealedInterfaceType(temp));
    })()) as com.myrnproject.shared.TestSealedInterfaceType | null)}, [onTestParams]);
  return <NativeMyComposeView {...rest} message={messageMemoized}
  textFieldValue={textFieldValueMemoized}
  nullableStringProp={nullableStringPropMemoized}
  boolProp={boolPropMemoized}
  nullableBoolProp={nullableBoolPropMemoized}
  intProp={intPropMemoized}
  nullableIntProp={nullableIntPropMemoized}
  doubleProp={doublePropMemoized}
  floatProp={floatPropMemoized}
  objectProp={objectPropMemoized}
  nullableObjectProp={nullableObjectPropMemoized}
  enumProp={enumPropMemoized}
  nullableEnumProp={nullableEnumPropMemoized}
  listProp={listPropMemoized}
  nullableListProp={nullableListPropMemoized}
  sealedInterface={sealedInterfaceMemoized}
  nullableSealedInterface={nullableSealedInterfaceMemoized}
  onTextFieldValueChange={nativeOnTextFieldValueChange}
  onButtonPress={nativeOnButtonPress}
  onTestParams={nativeOnTestParams} />;
};

const NativeMySecondComposeView = requireNativeComponent<NativeMySecondComposeViewProps>("MySecondComposeView");

export const MySecondComposeView = (props: MySecondComposeViewProps) => {
  const {
  index,
  onPress,
  ...rest
  } = props;
  const indexMemoized = useMemo(() => (() => {
    const temp = index;
    return temp;
  })(), [index]);
  const nativeOnPress = useCallback(() => {
    onPress()}, [onPress]);
  return <NativeMySecondComposeView {...rest} index={indexMemoized}
  onPress={nativeOnPress} />;
};

const NativeMyTransparentComposeView = requireNativeComponent<NativeMyTransparentComposeViewProps>("MyTransparentComposeView");

export const MyTransparentComposeView = (props: MyTransparentComposeViewProps) => {
  const {
  ...rest
  } = props;
  return <NativeMyTransparentComposeView {...rest}  />;
};

const NativeMyMinimalComposeView = requireNativeComponent<NativeMyMinimalComposeViewProps>("MyMinimalComposeView");

export const MyMinimalComposeView = (props: MyMinimalComposeViewProps) => {
  const {
  ...rest
  } = props;
  return <NativeMyMinimalComposeView {...rest}  />;
};
