// This file is generated by ReaktNativeToolkit. Do not edit.
import {com} from './models';
import {useMemo} from 'react';
import {EmitterSubscription, NativeEventEmitter, NativeModules} from 'react-native';
import {Next, Next1, Next2, NextX, useFlow} from 'reakt-native-toolkit';


interface NativeE2ETestInterface {

  testFlow: Next<number>;

  testFlowNullable: Next<number | null>;

  testFlowComplex: Next<com.myrnproject.shared.Test>;

  testFlowParameterized: Next1<com.myrnproject.shared.FlowTest, number>;

  testFlowParameterized2: Next2<com.myrnproject.shared.FlowTest, number, string>;

  testFlowParameterizedComplex: Next1<com.myrnproject.shared.FlowTest, string>;

  testFlowParameterizedComplex2: Next2<com.myrnproject.shared.FlowTest, string, string>;

  testFlowParameterizedMany: NextX<com.myrnproject.shared.FlowTest>;

  testFlowReturnInstant: Next<string>;

  testFlowReturnInstantAsDate: Next<Date>;

  testDefaultTypes(
      string: string,
      int: number,
      long: number,
      float: number,
      double: number,
      boolean: boolean,
      byte: number,
      char: number,
      short: number
  ): Promise<string>;

  testDefaultTypesNullable(
      string: string | null,
      int: number | null,
      long: number | null,
      float: number | null,
      double: number | null,
      boolean: boolean | null,
      byte: number | null,
      char: number | null,
      short: number | null
  ): Promise<string | null>;

  testListAndMap(
      list: string,
      map: string,
      nestedList: string,
      nestedMap: string,
      complexList: string,
      complexMap: string
  ): Promise<string>;

  testListAndMapNullable(
      list: string,
      map: string,
      nestedList: string,
      nestedMap: string,
      complexList: string,
      complexMap: string,
      listNullable: string,
      mapNullable: string,
      nestedListNullable: string,
      nestedMapNullable: string,
      complexListNullable: string,
      complexMapNullable: string
  ): Promise<string>;

  example(input: string, testEnum: string): Promise<string>;

  testSealedClassProperties(test: string): Promise<string>;

  testKotlinDateTime(
      instant: string,
      date: string,
      localDateTime: string,
      test: string,
      dateOrNull: string
  ): Promise<string>;

  getDateTimeTest(): Promise<string>;

  testTypeAlias(test: string): Promise<string>;

  testSealedSubtype(test: string): Promise<string>;

  testSealedCustomDiscriminator(test: string): Promise<void>;

  testMapWithEnumKey(map: string): Promise<string>;

  unsubscribeFromToolkitUseFlow(subscriptionId: string): Promise<void>;

}

/**
 * Module generated from {@link com.myrnproject.shared.E2ETest}.
 */
export interface E2ETestInterface {

  testFlow: Next<number>;

  testFlowNullable: Next<number | null>;

  testFlowComplex: Next<com.myrnproject.shared.Test>;

  testFlowParameterized: Next1<com.myrnproject.shared.FlowTest, number>;

  testFlowParameterized2: Next2<com.myrnproject.shared.FlowTest, number, string>;

  testFlowParameterizedComplex: Next1<com.myrnproject.shared.FlowTest, com.myrnproject.shared.Test>;

  testFlowParameterizedComplex2: Next2<com.myrnproject.shared.FlowTest, Array<com.myrnproject.shared.Test>, Record<string, com.myrnproject.shared.Test>>;

  testFlowParameterizedMany: NextX<com.myrnproject.shared.FlowTest>;

  testFlowReturnInstant: Next<string>;

  testFlowReturnInstantAsDate: Next<Date>;

  testDefaultTypes(
      string: string,
      int: number,
      long: number,
      float: number,
      double: number,
      boolean: boolean,
      byte: number,
      char: number,
      short: number
  ): Promise<string>;

  testDefaultTypesNullable(
      string: string | null,
      int: number | null,
      long: number | null,
      float: number | null,
      double: number | null,
      boolean: boolean | null,
      byte: number | null,
      char: number | null,
      short: number | null
  ): Promise<string | null>;

  testListAndMap(
      list: Array<string>,
      map: Record<string, string>,
      nestedList: Array<Array<string>>,
      nestedMap: Record<string, Record<string, string>>,
      complexList: Array<com.myrnproject.shared.Test>,
      complexMap: Record<string, com.myrnproject.shared.Test>
  ): Promise<Array<number>>;

  testListAndMapNullable(
      list: Array<string> | null,
      map: Record<string, string> | null,
      nestedList: Array<Array<string>> | null,
      nestedMap: Record<string, Record<string, string>> | null,
      complexList: Array<com.myrnproject.shared.Test> | null,
      complexMap: Record<string, com.myrnproject.shared.Test> | null,
      listNullable: Array<string | null>,
      mapNullable: Record<string, string | null>,
      nestedListNullable: Array<Array<string | null> | null>,
      nestedMapNullable: Record<string, Record<string, string | null> | null>,
      complexListNullable: Array<com.myrnproject.shared.Test | null>,
      complexMapNullable: Record<string, com.myrnproject.shared.Test | null>
  ): Promise<Array<number | null>>;

  example(input: com.myrnproject.shared.TestSealedType,
      testEnum: com.myrnproject.shared.Enum | null): Promise<com.myrnproject.shared.Test>;

  testSealedClassProperties(test: com.myrnproject.shared.TestSealedClassProperties): Promise<com.myrnproject.shared.TestSealedClassProperties>;

  testKotlinDateTime(
      instant: string,
      date: Date,
      localDateTime: string,
      test: com.myrnproject.shared.DateTimeTest,
      dateOrNull: Date | null
  ): Promise<string>;

  getDateTimeTest(): Promise<com.myrnproject.shared.DateTimeTest>;

  testTypeAlias(test: com.myrnproject.shared.TestTypeAlias): Promise<com.myrnproject.shared.TestTypeAlias>;

  testSealedSubtype(test: Omit<com.myrnproject.shared.TestSealedType.Option1, 'type'>): Promise<Omit<com.myrnproject.shared.TestSealedType.Option1, 'type'>>;

  testSealedCustomDiscriminator(test: com.myrnproject.shared.TestSealedTypeWithCustomDiscriminator): Promise<void>;

  testMapWithEnumKey(map: Record<com.myrnproject.shared.Enum, string>): Promise<Record<com.myrnproject.shared.Enum, string>>;

  useTestFlow(): number | null;

  useTestFlowNullable(): number | null | null;

  useTestFlowComplex(): com.myrnproject.shared.Test | null;

  useTestFlowParameterized(arg1: number): com.myrnproject.shared.FlowTest | null;

  useTestFlowParameterized2(arg1: number, arg2: string): com.myrnproject.shared.FlowTest | null;

  useTestFlowParameterizedComplex(arg1: com.myrnproject.shared.Test): com.myrnproject.shared.FlowTest | null;

  useTestFlowParameterizedComplex2(arg1: Array<com.myrnproject.shared.Test>,
      arg2: Record<string, com.myrnproject.shared.Test>): com.myrnproject.shared.FlowTest | null;

  useTestFlowParameterizedMany(arg1: number, arg2: string, arg3: Array<string>,
      arg4: Record<string, com.myrnproject.shared.Test>): com.myrnproject.shared.FlowTest | null;

  useTestFlowReturnInstant(): string | null;

  useTestFlowReturnInstantAsDate(): Date | null;

}

interface NativeNameManagerInterface {

  name: Next<string | null>;

  setName(name: string): Promise<void>;

  getName(): Promise<string | null>;

  unsubscribeFromToolkitUseFlow(subscriptionId: string): Promise<void>;

}

/**
 * Module generated from {@link com.myrnproject.shared.NameManager}.
 */
export interface NameManagerInterface {

  name: Next<string | null>;

  setName(name: string): Promise<void>;

  getName(): Promise<string | null>;

  useName(): string | null | null;

}

interface NativeNotificationDemoInterface {

  unsubscribeFromToolkitUseFlow(subscriptionId: string): Promise<void>;

}

/**
 * Module generated from {@link com.myrnproject.shared.NotificationDemo}.
 */
export interface NotificationDemoInterface {

  addEventListener(key: string, listener: (result: any) => void): EmitterSubscription;

}

interface NativeTimeProviderInterface {

  time: Next<Date>;

  isAfter: Next1<boolean, string>;

  timeAsState: Next<Date>;

  unsubscribeFromToolkitUseFlow(subscriptionId: string): Promise<void>;

}

/**
 * Module generated from {@link com.myrnproject.shared.TimeProvider}.
 */
export interface TimeProviderInterface {

  time: Next<Date>;

  isAfter: Next1<boolean, string>;

  timeAsState: Next<Date>;

  useTime(): Date | null;

  useIsAfter(time: string): boolean | null;

  useTimeAsState(): Date | null;

}

type _workaround = NativeEventEmitter;

const NativeE2ETest = (NativeModules.E2ETest) as NativeE2ETestInterface;

export const E2ETest: E2ETestInterface = {
  ...NativeE2ETest,
  ['testDefaultTypes']: (string: string, int: number, long: number, float: number, double: number, boolean: boolean, byte: number, char: number, short: number) =>
      NativeE2ETest.testDefaultTypes((() => {
    const temp = string;
    return temp;
  })(), (() => {
    const temp = int;
    return temp;
  })(), (() => {
    const temp = long;
    return temp;
  })(), (() => {
    const temp = float;
    return temp;
  })(), (() => {
    const temp = double;
    return temp;
  })(), (() => {
    const temp = boolean;
    return temp;
  })(), (() => {
    const temp = byte;
    return temp;
  })(), (() => {
    const temp = char;
    return temp;
  })(), (() => {
    const temp = short;
    return temp;
  })()).then((result) => ((() => {
    const temp = result;
    return temp;
  })()) as string),
  ['testDefaultTypesNullable']: (string: string | null, int: number | null, long: number | null, float: number | null, double: number | null, boolean: boolean | null, byte: number | null, char: number | null, short: number | null) =>
      NativeE2ETest.testDefaultTypesNullable((() => {
    const temp = string;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = int;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = long;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = float;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = double;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = boolean;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = byte;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = char;
    return temp === null ? null : (temp);
  })(), (() => {
    const temp = short;
    return temp === null ? null : (temp);
  })()).then((result) => ((() => {
    const temp = result;
    return temp === null ? null : (temp);
  })()) as string | null),
  ['testListAndMap']: (list: Array<string>, map: Record<string, string>, nestedList: Array<Array<string>>, nestedMap: Record<string, Record<string, string>>, complexList: Array<com.myrnproject.shared.Test>, complexMap: Record<string, com.myrnproject.shared.Test>) =>
      NativeE2ETest.testListAndMap(JSON.stringify((() => {
    const temp = list;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_;
    })());
  })()), JSON.stringify((() => {
    const temp = map;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return temp_;
    })()]));
  })()), JSON.stringify((() => {
    const temp = nestedList;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_.map((it_: any) => (() => {
        const temp__ = it_;
        return temp__;
      })());
    })());
  })()), JSON.stringify((() => {
    const temp = nestedMap;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return Object.fromEntries(Object.entries(temp_).map(([key_, value_]: [any, any]) => [(() => {
        const temp__ = key_;
        return temp__;
      })(), (() => {
        const temp__ = value_;
        return temp__;
      })()]));
    })()]));
  })()), JSON.stringify((() => {
    const temp = complexList;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonTest(temp_);
    })());
  })()), JSON.stringify((() => {
    const temp = complexMap;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return com.myrnproject.shared.toJsonTest(temp_);
    })()]));
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return temp.map((it: any) => ((() => {
      const temp_ = it;
      return temp_;
    })()) as number);
  })()) as Array<number>),
  ['testListAndMapNullable']: (list: Array<string> | null, map: Record<string, string> | null, nestedList: Array<Array<string>> | null, nestedMap: Record<string, Record<string, string>> | null, complexList: Array<com.myrnproject.shared.Test> | null, complexMap: Record<string, com.myrnproject.shared.Test> | null, listNullable: Array<string | null>, mapNullable: Record<string, string | null>, nestedListNullable: Array<Array<string | null> | null>, nestedMapNullable: Record<string, Record<string, string | null> | null>, complexListNullable: Array<com.myrnproject.shared.Test | null>, complexMapNullable: Record<string, com.myrnproject.shared.Test | null>) =>
      NativeE2ETest.testListAndMapNullable(JSON.stringify((() => {
    const temp = list;
    return temp === null ? null : (temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_;
    })()));
  })()), JSON.stringify((() => {
    const temp = map;
    return temp === null ? null : (Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return temp_;
    })()])));
  })()), JSON.stringify((() => {
    const temp = nestedList;
    return temp === null ? null : (temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_.map((it_: any) => (() => {
        const temp__ = it_;
        return temp__;
      })());
    })()));
  })()), JSON.stringify((() => {
    const temp = nestedMap;
    return temp === null ? null : (Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return Object.fromEntries(Object.entries(temp_).map(([key_, value_]: [any, any]) => [(() => {
        const temp__ = key_;
        return temp__;
      })(), (() => {
        const temp__ = value_;
        return temp__;
      })()]));
    })()])));
  })()), JSON.stringify((() => {
    const temp = complexList;
    return temp === null ? null : (temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonTest(temp_);
    })()));
  })()), JSON.stringify((() => {
    const temp = complexMap;
    return temp === null ? null : (Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return com.myrnproject.shared.toJsonTest(temp_);
    })()])));
  })()), JSON.stringify((() => {
    const temp = listNullable;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_ === null ? null : (temp_);
    })());
  })()), JSON.stringify((() => {
    const temp = mapNullable;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return temp_ === null ? null : (temp_);
    })()]));
  })()), JSON.stringify((() => {
    const temp = nestedListNullable;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_ === null ? null : (temp_.map((it_: any) => (() => {
        const temp__ = it_;
        return temp__ === null ? null : (temp__);
      })()));
    })());
  })()), JSON.stringify((() => {
    const temp = nestedMapNullable;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return temp_ === null ? null : (Object.fromEntries(Object.entries(temp_).map(([key_, value_]: [any, any]) => [(() => {
        const temp__ = key_;
        return temp__;
      })(), (() => {
        const temp__ = value_;
        return temp__ === null ? null : (temp__);
      })()])));
    })()]));
  })()), JSON.stringify((() => {
    const temp = complexListNullable;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_ === null ? null : (com.myrnproject.shared.toJsonTest(temp_));
    })());
  })()), JSON.stringify((() => {
    const temp = complexMapNullable;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return temp_ === null ? null : (com.myrnproject.shared.toJsonTest(temp_));
    })()]));
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return temp.map((it: any) => ((() => {
      const temp_ = it;
      return temp_ === null ? null : (temp_);
    })()) as number | null);
  })()) as Array<number | null>),
  ['example']: (input: com.myrnproject.shared.TestSealedType, testEnum: com.myrnproject.shared.Enum | null) =>
      NativeE2ETest.example(JSON.stringify((() => {
    const temp = input;
    return com.myrnproject.shared.toJsonTestSealedType(temp);
  })()), JSON.stringify((() => {
    const temp = testEnum;
    return temp === null ? null : (com.myrnproject.shared.toJsonEnum(temp));
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return com.myrnproject.shared.fromJsonTest(temp);
  })()) as com.myrnproject.shared.Test),
  ['testSealedClassProperties']: (test: com.myrnproject.shared.TestSealedClassProperties) =>
      NativeE2ETest.testSealedClassProperties(JSON.stringify((() => {
    const temp = test;
    return com.myrnproject.shared.toJsonTestSealedClassProperties(temp);
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return com.myrnproject.shared.fromJsonTestSealedClassProperties(temp);
  })()) as com.myrnproject.shared.TestSealedClassProperties),
  ['testKotlinDateTime']: (instant: string, date: Date, localDateTime: string, test: com.myrnproject.shared.DateTimeTest, dateOrNull: Date | null) =>
      NativeE2ETest.testKotlinDateTime(JSON.stringify((() => {
    const temp = instant;
    return temp;
  })()), JSON.stringify((() => {
    const temp = date;
    return temp.toISOString();
  })()), JSON.stringify((() => {
    const temp = localDateTime;
    return temp;
  })()), JSON.stringify((() => {
    const temp = test;
    return com.myrnproject.shared.toJsonDateTimeTest(temp);
  })()), JSON.stringify((() => {
    const temp = dateOrNull;
    return temp === null ? null : (temp.toISOString());
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return temp;
  })()) as string),
  ['getDateTimeTest']: () => NativeE2ETest.getDateTimeTest().then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return com.myrnproject.shared.fromJsonDateTimeTest(temp);
  })()) as com.myrnproject.shared.DateTimeTest),
  ['testTypeAlias']: (test: com.myrnproject.shared.TestTypeAlias) => NativeE2ETest.testTypeAlias(JSON.stringify((() => {
    const temp = test;
    return temp;
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return temp;
  })()) as com.myrnproject.shared.TestTypeAlias),
  ['testSealedSubtype']: (test: Omit<com.myrnproject.shared.TestSealedType.Option1, 'type'>) =>
      NativeE2ETest.testSealedSubtype(JSON.stringify((() => {
    const temp = test;
    return com.myrnproject.shared.TestSealedType.toJsonOption1(temp);
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return com.myrnproject.shared.TestSealedType.fromJsonOption1(temp);
  })()) as Omit<com.myrnproject.shared.TestSealedType.Option1, 'type'>),
  ['testSealedCustomDiscriminator']: (test: com.myrnproject.shared.TestSealedTypeWithCustomDiscriminator) =>
      NativeE2ETest.testSealedCustomDiscriminator(JSON.stringify((() => {
    const temp = test;
    return com.myrnproject.shared.toJsonTestSealedTypeWithCustomDiscriminator(temp);
  })())).then((result) => ((() => {
    const temp = result;
    return temp;
  })()) as void),
  ['testMapWithEnumKey']: (map: Record<com.myrnproject.shared.Enum, string>) =>
      NativeE2ETest.testMapWithEnumKey(JSON.stringify((() => {
    const temp = map;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return com.myrnproject.shared.toJsonEnum(temp_);
    })(), (() => {
      const temp_ = value;
      return temp_;
    })()]));
  })())).then(JSON.parse).then((result) => ((() => {
    const temp = result;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [((() => {
      const temp_ = key;
      return com.myrnproject.shared.fromJsonEnum(temp_);
    })()) as com.myrnproject.shared.Enum, ((() => {
      const temp_ = value;
      return temp_;
    })()) as string]));
  })()) as Record<com.myrnproject.shared.Enum, string>),
  ['testFlow']: (subscriptionId: string, currentValue: string | null) =>
      NativeE2ETest.testFlow(subscriptionId, currentValue),
  ['testFlowNullable']: (subscriptionId: string, currentValue: string | null) =>
      NativeE2ETest.testFlowNullable(subscriptionId, currentValue),
  ['testFlowComplex']: (subscriptionId: string, currentValue: string | null) =>
      NativeE2ETest.testFlowComplex(subscriptionId, currentValue),
  ['testFlowParameterized']: (subscriptionId: string, currentValue: string | null, arg1: number) =>
      NativeE2ETest.testFlowParameterized(subscriptionId, currentValue, (() => {
    const temp = arg1;
    return temp;
  })()),
  ['testFlowParameterized2']: (subscriptionId: string, currentValue: string | null, arg1: number, arg2: string) =>
      NativeE2ETest.testFlowParameterized2(subscriptionId, currentValue, (() => {
    const temp = arg1;
    return temp;
  })(), (() => {
    const temp = arg2;
    return temp;
  })()),
  ['testFlowParameterizedComplex']: (subscriptionId: string, currentValue: string | null, arg1: com.myrnproject.shared.Test) =>
      NativeE2ETest.testFlowParameterizedComplex(subscriptionId, currentValue, JSON.stringify((() => {
    const temp = arg1;
    return com.myrnproject.shared.toJsonTest(temp);
  })())),
  ['testFlowParameterizedComplex2']: (subscriptionId: string, currentValue: string | null, arg1: Array<com.myrnproject.shared.Test>, arg2: Record<string, com.myrnproject.shared.Test>) =>
      NativeE2ETest.testFlowParameterizedComplex2(subscriptionId, currentValue, JSON.stringify((() => {
    const temp = arg1;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return com.myrnproject.shared.toJsonTest(temp_);
    })());
  })()), JSON.stringify((() => {
    const temp = arg2;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return com.myrnproject.shared.toJsonTest(temp_);
    })()]));
  })())),
  ['testFlowParameterizedMany']: (subscriptionId: string, currentValue: string | null, arg1: number, arg2: string, arg3: Array<string>, arg4: Record<string, com.myrnproject.shared.Test>) =>
      NativeE2ETest.testFlowParameterizedMany(subscriptionId, currentValue, (() => {
    const temp = arg1;
    return temp;
  })(), (() => {
    const temp = arg2;
    return temp;
  })(), JSON.stringify((() => {
    const temp = arg3;
    return temp.map((it: any) => (() => {
      const temp_ = it;
      return temp_;
    })());
  })()), JSON.stringify((() => {
    const temp = arg4;
    return Object.fromEntries(Object.entries(temp).map(([key, value]: [any, any]) => [(() => {
      const temp_ = key;
      return temp_;
    })(), (() => {
      const temp_ = value;
      return com.myrnproject.shared.toJsonTest(temp_);
    })()]));
  })())),
  ['testFlowReturnInstant']: (subscriptionId: string, currentValue: string | null) =>
      NativeE2ETest.testFlowReturnInstant(subscriptionId, currentValue),
  ['testFlowReturnInstantAsDate']: (subscriptionId: string, currentValue: string | null) =>
      NativeE2ETest.testFlowReturnInstantAsDate(subscriptionId, currentValue),
  ['useTestFlow']: () => {
    const value = useFlow(E2ETest.testFlow, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlow');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return temp_;
      })()) as number);
    })(), [value]);
  },
  ['useTestFlowNullable']: () => {
    const value = useFlow(E2ETest.testFlowNullable, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowNullable');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return temp_ === null ? null : (temp_);
      })()) as number | null);
    })(), [value]);
  },
  ['useTestFlowComplex']: () => {
    const value = useFlow(E2ETest.testFlowComplex, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowComplex');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonTest(temp_);
      })()) as com.myrnproject.shared.Test);
    })(), [value]);
  },
  ['useTestFlowParameterized']: (arg1: number) => {
    const value = useFlow(E2ETest.testFlowParameterized, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowParameterized', arg1);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonFlowTest(temp_);
      })()) as com.myrnproject.shared.FlowTest);
    })(), [value]);
  },
  ['useTestFlowParameterized2']: (arg1_: number, arg2: string) => {
    const value = useFlow(E2ETest.testFlowParameterized2, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowParameterized2', arg1_, arg2);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonFlowTest(temp_);
      })()) as com.myrnproject.shared.FlowTest);
    })(), [value]);
  },
  ['useTestFlowParameterizedComplex']: (arg1__: com.myrnproject.shared.Test) => {
    const value = useFlow(E2ETest.testFlowParameterizedComplex, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowParameterizedComplex', arg1__);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonFlowTest(temp_);
      })()) as com.myrnproject.shared.FlowTest);
    })(), [value]);
  },
  ['useTestFlowParameterizedComplex2']: (arg1___: Array<com.myrnproject.shared.Test>, arg2_: Record<string, com.myrnproject.shared.Test>) =>
      {
    const value = useFlow(E2ETest.testFlowParameterizedComplex2, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowParameterizedComplex2', arg1___, arg2_);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonFlowTest(temp_);
      })()) as com.myrnproject.shared.FlowTest);
    })(), [value]);
  },
  ['useTestFlowParameterizedMany']: (arg1____: number, arg2__: string, arg3: Array<string>, arg4: Record<string, com.myrnproject.shared.Test>) =>
      {
    const value = useFlow(E2ETest.testFlowParameterizedMany, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowParameterizedMany', arg1____, arg2__, arg3, arg4);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return com.myrnproject.shared.fromJsonFlowTest(temp_);
      })()) as com.myrnproject.shared.FlowTest);
    })(), [value]);
  },
  ['useTestFlowReturnInstant']: () => {
    const value = useFlow(E2ETest.testFlowReturnInstant, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowReturnInstant');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return temp_;
      })()) as string);
    })(), [value]);
  },
  ['useTestFlowReturnInstantAsDate']: () => {
    const value = useFlow(E2ETest.testFlowReturnInstantAsDate, NativeE2ETest.unsubscribeFromToolkitUseFlow, 'E2ETest.testFlowReturnInstantAsDate');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return new Date(temp_);
      })()) as Date);
    })(), [value]);
  }
};

const NativeNameManager = (NativeModules.NameManager) as NativeNameManagerInterface;

export const NameManager: NameManagerInterface = {
  ...NativeNameManager,
  ['setName']: (name: string) => NativeNameManager.setName((() => {
    const temp = name;
    return temp;
  })()).then((result) => ((() => {
    const temp = result;
    return temp;
  })()) as void),
  ['getName']: () => NativeNameManager.getName().then((result) => ((() => {
    const temp = result;
    return temp === null ? null : (temp);
  })()) as string | null),
  ['name']: (subscriptionId: string, currentValue: string | null) =>
      NativeNameManager.name(subscriptionId, currentValue),
  ['useName']: () => {
    const value = useFlow(NameManager.name, NativeNameManager.unsubscribeFromToolkitUseFlow, 'NameManager.name');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return temp_ === null ? null : (temp_);
      })()) as string | null);
    })(), [value]);
  }
};

const NativeNotificationDemo = (NativeModules.NotificationDemo) as NativeNotificationDemoInterface;

export const NotificationDemo: NotificationDemoInterface = {
  ...NativeNotificationDemo,
  ['addEventListener']: (key: string, listener: (result: any) => void) => {
    const eventEmitter = new NativeEventEmitter((NativeNotificationDemo) as any);
    return eventEmitter.addListener(key, listener);
  }
};

const NativeTimeProvider = (NativeModules.TimeProvider) as NativeTimeProviderInterface;

export const TimeProvider: TimeProviderInterface = {
  ...NativeTimeProvider,
  ['time']: (subscriptionId: string, currentValue: string | null) =>
      NativeTimeProvider.time(subscriptionId, currentValue),
  ['isAfter']: (subscriptionId: string, currentValue: string | null, time: string) =>
      NativeTimeProvider.isAfter(subscriptionId, currentValue, (() => {
    const temp = time;
    return temp;
  })()),
  ['timeAsState']: (subscriptionId: string, currentValue: string | null) =>
      NativeTimeProvider.timeAsState(subscriptionId, currentValue),
  ['useTime']: () => {
    const value = useFlow(TimeProvider.time, NativeTimeProvider.unsubscribeFromToolkitUseFlow, 'TimeProvider.time');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return new Date(temp_);
      })()) as Date);
    })(), [value]);
  },
  ['useIsAfter']: (time: string) => {
    const value = useFlow(TimeProvider.isAfter, NativeTimeProvider.unsubscribeFromToolkitUseFlow, 'TimeProvider.isAfter', time);
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return temp_;
      })()) as boolean);
    })(), [value]);
  },
  ['useTimeAsState']: () => {
    const value = useFlow(TimeProvider.timeAsState, NativeTimeProvider.unsubscribeFromToolkitUseFlow, 'TimeProvider.timeAsState');
    return useMemo(() => (() => {
      const temp = value;
      return temp === null ? null : (((() => {
        const temp_ = temp;
        return new Date(temp_);
      })()) as Date);
    })(), [value]);
  }
};

const _workaround2 = useFlow
const _workaround3 = NativeModules
const _workaround4 = useMemo