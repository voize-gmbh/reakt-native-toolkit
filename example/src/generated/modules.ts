// This file is generated by ReaktNativeToolkit. Do not edit.
import {com} from './models';
import {EmitterSubscription, NativeEventEmitter, NativeModules} from 'react-native';
import {Next, Next1, Next2, NextX} from 'reakt-native-toolkit';


interface NativeE2ETestInterface {

  testFlow: Next<number>;

  testFlowNullable: Next<number | null>;

  testFlowComplex: Next<com.myrnproject.shared.Test>;

  testFlowParameterized: Next1<com.myrnproject.shared.FlowTest, number>;

  testFlowParameterized2: Next2<com.myrnproject.shared.FlowTest, number, string>;

  testFlowParameterizedComplex: Next1<com.myrnproject.shared.FlowTest, com.myrnproject.shared.Test>;

  testFlowParameterizedComplex2: Next2<com.myrnproject.shared.FlowTest, Array<com.myrnproject.shared.Test>, Record<string, com.myrnproject.shared.Test>>;

  testFlowParameterizedMany: NextX<com.myrnproject.shared.FlowTest>;

  testDefaultTypes(
      string: string,
      int: number,
      long: number,
      float: number,
      double: number,
      boolean: boolean,
      byte: number,
      char: number,
      short: number
  ): Promise<string>;

  testDefaultTypesNullable(
      string: string | null,
      int: number | null,
      long: number | null,
      float: number | null,
      double: number | null,
      boolean: boolean | null,
      byte: number | null,
      char: number | null,
      short: number | null
  ): Promise<string | null>;

  testListAndMap(
      list: string,
      map: string,
      nestedList: string,
      nestedMap: string,
      complexList: string,
      complexMap: string
  ): Promise<string>;

  testListAndMapNullable(
      list: string,
      map: string,
      nestedList: string,
      nestedMap: string,
      complexList: string,
      complexMap: string,
      listNullable: string,
      mapNullable: string,
      nestedListNullable: string,
      nestedMapNullable: string,
      complexListNullable: string,
      complexMapNullable: string
  ): Promise<string>;

  example(input: string, testEnum: string): Promise<string>;

  testKotlinDateTime(instant: string, localDateTime: string): Promise<string>;

  testTypeAlias(test: string): Promise<string>;

  testSealedSubtype(test: string): Promise<string>;

  testSealedCustomDiscriminator(test: string): Promise<void>;

}

/**
 * Module generated from {@link com.myrnproject.shared.E2ETest}.
 */
export interface E2ETestInterface {

  testFlow: Next<number>;

  testFlowNullable: Next<number | null>;

  testFlowComplex: Next<com.myrnproject.shared.Test>;

  testFlowParameterized: Next1<com.myrnproject.shared.FlowTest, number>;

  testFlowParameterized2: Next2<com.myrnproject.shared.FlowTest, number, string>;

  testFlowParameterizedComplex: Next1<com.myrnproject.shared.FlowTest, com.myrnproject.shared.Test>;

  testFlowParameterizedComplex2: Next2<com.myrnproject.shared.FlowTest, Array<com.myrnproject.shared.Test>, Record<string, com.myrnproject.shared.Test>>;

  testFlowParameterizedMany: NextX<com.myrnproject.shared.FlowTest>;

  testDefaultTypes(
      string: string,
      int: number,
      long: number,
      float: number,
      double: number,
      boolean: boolean,
      byte: number,
      char: number,
      short: number
  ): Promise<string>;

  testDefaultTypesNullable(
      string: string | null,
      int: number | null,
      long: number | null,
      float: number | null,
      double: number | null,
      boolean: boolean | null,
      byte: number | null,
      char: number | null,
      short: number | null
  ): Promise<string | null>;

  testListAndMap(
      list: Array<string>,
      map: Record<string, string>,
      nestedList: Array<Array<string>>,
      nestedMap: Record<string, Record<string, string>>,
      complexList: Array<com.myrnproject.shared.Test>,
      complexMap: Record<string, com.myrnproject.shared.Test>
  ): Promise<Array<number>>;

  testListAndMapNullable(
      list: Array<string> | null,
      map: Record<string, string> | null,
      nestedList: Array<Array<string>> | null,
      nestedMap: Record<string, Record<string, string>> | null,
      complexList: Array<com.myrnproject.shared.Test> | null,
      complexMap: Record<string, com.myrnproject.shared.Test> | null,
      listNullable: Array<string | null>,
      mapNullable: Record<string, string | null>,
      nestedListNullable: Array<Array<string | null> | null>,
      nestedMapNullable: Record<string, Record<string, string | null> | null>,
      complexListNullable: Array<com.myrnproject.shared.Test | null>,
      complexMapNullable: Record<string, com.myrnproject.shared.Test | null>
  ): Promise<Array<number | null>>;

  example(input: com.myrnproject.shared.TestSealedType,
      testEnum: com.myrnproject.shared.Enum | null): Promise<com.myrnproject.shared.Test>;

  testKotlinDateTime(instant: string, localDateTime: string): Promise<string>;

  testTypeAlias(test: com.myrnproject.shared.TestTypeAlias): Promise<com.myrnproject.shared.TestTypeAlias>;

  testSealedSubtype(test: com.myrnproject.shared.TestSealedType.Option1): Promise<com.myrnproject.shared.TestSealedType.Option1>;

  testSealedCustomDiscriminator(test: com.myrnproject.shared.TestSealedTypeWithCustomDiscriminator): Promise<void>;

}

interface NativeNameManagerInterface {

  name: Next<string | null>;

  setName(name: string): Promise<void>;

  getName(): Promise<string | null>;

}

/**
 * Module generated from {@link com.myrnproject.shared.NameManager}.
 */
export interface NameManagerInterface {

  name: Next<string | null>;

  setName(name: string): Promise<void>;

  getName(): Promise<string | null>;

}

interface NativeNotificationDemoInterface {
}

/**
 * Module generated from {@link com.myrnproject.shared.NotificationDemo}.
 */
export interface NotificationDemoInterface {

  addEventListener(key: string, listener: (result: any) => void): EmitterSubscription;

}

type _workaround = NativeEventEmitter;

const NativeE2ETest = NativeModules.E2ETest as NativeE2ETestInterface
export const E2ETest: E2ETestInterface = {
  ...NativeE2ETest,
  testDefaultTypes: (string: string, int: number, long: number, float: number, double: number, boolean: boolean, byte: number, char: number, short: number) => NativeE2ETest.testDefaultTypes(string, int, long, float, double, boolean, byte, char, short),
  testDefaultTypesNullable: (string: string | null, int: number | null, long: number | null, float: number | null, double: number | null, boolean: boolean | null, byte: number | null, char: number | null, short: number | null) => NativeE2ETest.testDefaultTypesNullable(string, int, long, float, double, boolean, byte, char, short),
  testListAndMap: (list: Array<string>, map: Record<string, string>, nestedList: Array<Array<string>>, nestedMap: Record<string, Record<string, string>>, complexList: Array<com.myrnproject.shared.Test>, complexMap: Record<string, com.myrnproject.shared.Test>) => NativeE2ETest.testListAndMap(JSON.stringify(list), JSON.stringify(map), JSON.stringify(nestedList), JSON.stringify(nestedMap), JSON.stringify(complexList), JSON.stringify(complexMap)).then(JSON.parse),
  testListAndMapNullable: (list: Array<string> | null, map: Record<string, string> | null, nestedList: Array<Array<string>> | null, nestedMap: Record<string, Record<string, string>> | null, complexList: Array<com.myrnproject.shared.Test> | null, complexMap: Record<string, com.myrnproject.shared.Test> | null, listNullable: Array<string | null>, mapNullable: Record<string, string | null>, nestedListNullable: Array<Array<string | null> | null>, nestedMapNullable: Record<string, Record<string, string | null> | null>, complexListNullable: Array<com.myrnproject.shared.Test | null>, complexMapNullable: Record<string, com.myrnproject.shared.Test | null>) => NativeE2ETest.testListAndMapNullable(JSON.stringify(list), JSON.stringify(map), JSON.stringify(nestedList), JSON.stringify(nestedMap), JSON.stringify(complexList), JSON.stringify(complexMap), JSON.stringify(listNullable), JSON.stringify(mapNullable), JSON.stringify(nestedListNullable), JSON.stringify(nestedMapNullable), JSON.stringify(complexListNullable), JSON.stringify(complexMapNullable)).then(JSON.parse),
  example: (input: com.myrnproject.shared.TestSealedType, testEnum: com.myrnproject.shared.Enum | null) => NativeE2ETest.example(JSON.stringify(input), JSON.stringify(testEnum)).then(JSON.parse),
  testKotlinDateTime: (instant: string, localDateTime: string) => NativeE2ETest.testKotlinDateTime(JSON.stringify(instant), JSON.stringify(localDateTime)).then(JSON.parse),
  testTypeAlias: (test: com.myrnproject.shared.TestTypeAlias) => NativeE2ETest.testTypeAlias(JSON.stringify(test)).then(JSON.parse),
  testSealedSubtype: (test: com.myrnproject.shared.TestSealedType.Option1) => NativeE2ETest.testSealedSubtype(JSON.stringify(test)).then(JSON.parse),
  testSealedCustomDiscriminator: (test: com.myrnproject.shared.TestSealedTypeWithCustomDiscriminator) => NativeE2ETest.testSealedCustomDiscriminator(JSON.stringify(test)),
  testFlow: (currentValue: string | null) => NativeE2ETest.testFlow(currentValue),
  testFlowNullable: (currentValue: string | null) => NativeE2ETest.testFlowNullable(currentValue),
  testFlowComplex: (currentValue: string | null) => NativeE2ETest.testFlowComplex(currentValue),
  testFlowParameterized: (currentValue: string | null, arg1: number) => NativeE2ETest.testFlowParameterized(currentValue, arg1),
  testFlowParameterized2: (currentValue: string | null, arg1: number, arg2: string) => NativeE2ETest.testFlowParameterized2(currentValue, arg1, arg2),
  testFlowParameterizedComplex: (currentValue: string | null, arg1: com.myrnproject.shared.Test) => NativeE2ETest.testFlowParameterizedComplex(currentValue, JSON.stringify(arg1)),
  testFlowParameterizedComplex2: (currentValue: string | null, arg1: Array<com.myrnproject.shared.Test>, arg2: Record<string, com.myrnproject.shared.Test>) => NativeE2ETest.testFlowParameterizedComplex2(currentValue, JSON.stringify(arg1), JSON.stringify(arg2)),
  testFlowParameterizedMany: (currentValue: string | null, arg1: number, arg2: string, arg3: Array<string>, arg4: Record<string, com.myrnproject.shared.Test>) => NativeE2ETest.testFlowParameterizedMany(currentValue, arg1, arg2, JSON.stringify(arg3), JSON.stringify(arg4))
}
const NativeNameManager = NativeModules.NameManager as NativeNameManagerInterface
export const NameManager: NameManagerInterface = {
  ...NativeNameManager,
  setName: (name: string) => NativeNameManager.setName(name),
  getName: () => NativeNameManager.getName(),
  name: (currentValue: string | null) => NativeNameManager.name(currentValue)
}
const NativeNotificationDemo = NativeModules.NotificationDemo as NativeNotificationDemoInterface
export const NotificationDemo: NotificationDemoInterface = {
  ...NativeNotificationDemo,
  addEventListener: (key: string, listener: (result: any) => void) => {
    const eventEmitter = new NativeEventEmitter(NativeNotificationDemo as any);
    return eventEmitter.addListener(key, listener);
  }
}